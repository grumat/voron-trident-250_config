[temperature_sensor chamber]
sensor_type = Generic 3950
sensor_pin = PF5
min_temp = 0
max_temp = 80
gcode_id = C

[fan_generic exhaust_fan]
###  Exhaust fan - FAN3
hardware_pwm = True
pin = PD13
cycle_time = 0.0125
kick_start_time = 1.0
max_power = 1.0
off_below = 0.2
#min_speed = 0.2
#shutdown_speed = 0.0

[gcode_macro SET_CHAMBER_EXHAUST]
description = Controls the exhaust fan behaviour
variable_target = 35.0
variable_max_diff = 8.0
variable_min_pwm = 0.25
gcode:
	{% if 'TARGET' in params %}
		{% set target_val = params.TARGET|float %}
		SET_GCODE_VARIABLE MACRO=SET_CHAMBER_EXHAUST VARIABLE=target VALUE={target_val}
	{% endif %}

	{% if 'MAX_DIFF' in params %}
		{% set max_diff_val = params.MAX_DIFF|float %}
		SET_GCODE_VARIABLE MACRO=SET_CHAMBER_EXHAUST VARIABLE=max_diff VALUE={max_diff_val}
	{% endif %}

	{% if 'MIN_PWM' in params %}
		{% set min_pwm_val = params.MIN_PWM|float %}
		SET_GCODE_VARIABLE MACRO=SET_CHAMBER_EXHAUST VARIABLE=min_pwm VALUE={min_pwm_val}
	{% endif %}
	# Update on next iteration

[delayed_gcode exhaust_fan_control]
initial_duration = 5.0
gcode:
	# Use 'gcode_macro' to access the variables from the SET_CHAMBER_EXHAUST macro
	{% set target = printer['gcode_macro SET_CHAMBER_EXHAUST'].target | default(35.0) %}
	{% set max_diff = printer['gcode_macro SET_CHAMBER_EXHAUST'].max_diff | default(8.0) %}
	{% set min_pwm = printer['gcode_macro SET_CHAMBER_EXHAUST'].min_pwm | default(0.15) %}

	# Get the current temperature from the sensor
	{% set current_temp = printer['temperature_sensor chamber'].temperature %}

	# Apply a shift on the target
	{% set target = target - (max_diff / 2.0) %}

	# Calculate the temperature difference
	{% set diff = current_temp - target %}

	# Define the off-threshold for hysteresis
	{% set off_threshold = target - 1 %}

	# Determine fan speed
	{% if diff > max_diff %}
		# Fan at full speed
		SET_FAN_SPEED FAN=exhaust_fan SPEED=1.0
	{% elif diff > 0 %}
		# Linear ramp from min_pwm to 100% speed
		{% set fan_speed = (min_pwm + (diff / max_diff) * (1.0 - min_pwm)) %}
		SET_FAN_SPEED FAN=exhaust_fan SPEED={fan_speed|float}
	{% else %}
		# Check for hysteresis
		{% if printer["fan_generic exhaust_fan"].speed > 0 and current_temp > off_threshold %}
			# If fan is already on and temp is above off_threshold, keep it at min_pwm
			SET_FAN_SPEED FAN=exhaust_fan SPEED={min_pwm|float}
		{% else %}
			# Fan off
			SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
		{% endif %}
	{% endif %}

	# Reschedule this macro to run again in 5 seconds
	UPDATE_DELAYED_GCODE ID=exhaust_fan_control DURATION=5.0

[gcode_macro M141]
;rename_existing = BASE_M141
gcode:
	# First, call the base implementation of M141 for chamber heaters.
	;BASE_M141 {rawparams}

	# Now, call your custom macro to control the fan using the temperature from the slicer.
	{% if 'S' in params %}
		SET_CHAMBER_EXHAUST TARGET={params.S}
	{% endif %}
